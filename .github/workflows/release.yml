name: Cut Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # allow pushing tags and commits
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecto_cooler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch tags and history for git operations

      - name: Set up Elixir & OTP
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Install dependencies
        run: mix deps.get

      - name: Run tests
        run: mix test

      - name: Determine version bump from branch name
        id: version_bump
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          
          if [[ "$BRANCH_NAME" =~ ^(major|breaking)/ ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "bump_reason=major/breaking change" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" =~ ^(minor|feature)/ ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "bump_reason=minor/feature addition" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" =~ ^(patch|fix|bugfix|hotfix)/ ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "bump_reason=patch/bug fix" >> $GITHUB_OUTPUT
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "bump_reason=no conventional commit prefix found" >> $GITHUB_OUTPUT
          fi
          
          echo "Branch: $BRANCH_NAME"
          echo "Bump type: ${{ steps.version_bump.outputs.bump_type }}"
          echo "Reason: ${{ steps.version_bump.outputs.bump_reason }}"

      - name: Bump version and update changelog
        if: steps.version_bump.outputs.bump_type != 'none'
        id: version_update
        env:
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          chmod +x scripts/bump_version.sh
          OUTPUT=$(./scripts/bump_version.sh "${{ steps.version_bump.outputs.bump_type }}" "${{ github.event.pull_request.head.ref }}" "${{ github.event.pull_request.title }}")
          
          # Parse the output to get version info
          NEW_VERSION=$(echo "$OUTPUT" | grep "new_version=" | cut -d'=' -f2)
          OLD_VERSION=$(echo "$OUTPUT" | grep "old_version=" | cut -d'=' -f2)
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and tag release
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add mix.exs CHANGELOG.md
          git commit -m "Release version ${{ steps.version_update.outputs.new_version }}"
          
          git tag -a "v${{ steps.version_update.outputs.new_version }}" \
            -m "Release version ${{ steps.version_update.outputs.new_version }}"
          
          git push origin HEAD:main --follow-tags

      - name: Skip release
        if: steps.version_bump.outputs.bump_type == 'none'
        run: |
          echo "No conventional commit prefix found in branch name. Skipping release."
          echo "Branch name: ${{ github.event.pull_request.head.ref }}"
          echo "Expected prefixes: major/, minor/, patch/, fix/, bugfix/, hotfix/, feature/"
